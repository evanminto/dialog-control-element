{"mappings":"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","sources":["<anon>","src/global.js","src/index.js","src/ModalControlElement.js","src/isEventInsideElement.js","src/startViewTransition.js"],"sourcesContent":["(() => {\n/**\n * @param {MouseEvent}  event\n * @param {HTMLElement} element\n * @returns {boolean}\n */ function $01775cf5aedf1ce5$export$2e2bcd8739ae039(event, element) {\n    const { clientX: clientX, clientY: clientY } = event;\n    const target = /** @type {HTMLElement} */ event.target;\n    const { x: x, y: y, width: width, height: height } = element.getBoundingClientRect();\n    return element.contains(target) || clientX >= x && clientX <= x + width && clientY >= y && clientY <= y + height;\n}\n\n\n/**\n * @param {() => any} callback\n * @returns {void}\n */ function $e522255001cd1bf6$export$2e2bcd8739ae039(callback) {\n    if (\"startViewTransition\" in document) return document.startViewTransition(callback);\n    return callback();\n}\n\n\nclass $1c1612fc3437cf32$export$2e2bcd8739ae039 extends HTMLElement {\n    /** @type {string | null} */ #target = null;\n    /** @type {'toggle' | 'show' | 'hide'} */ #targetAction = \"toggle\";\n    /** @type {boolean} */ #lightDismiss = false;\n    /** @type {boolean} */ #viewTransitions = false;\n    static observedAttributes = [\n        \"target\",\n        \"target-action\",\n        \"light-dismiss\",\n        \"view-transitions\"\n    ];\n    /**\n   * @param {string}  name\n   * @param {string | undefined}     _oldVal\n   * @param {string | undefined}     newVal\n   */ attributeChangedCallback(name, _oldVal, newVal) {\n        if (name === \"target\") this.#target = newVal || null;\n        if (name === \"target-action\" && newVal && [\n            \"toggle\",\n            \"show\",\n            \"hide\"\n        ].includes(newVal)) this.#targetAction = /** @type {'toggle' | 'show' | 'hide'} */ newVal;\n        if (name === \"light-dismiss\") this.#lightDismiss = newVal !== undefined;\n        if (name === \"view-transitions\") this.#viewTransitions = newVal !== undefined;\n    }\n    /**\n   * ID of the target `<dialog>`\n   * @type {string|null}\n   */ get target() {\n        return this.#target;\n    }\n    set target(value) {\n        this.#target = value;\n        if (value === null) this.removeAttribute(\"target\");\n        else this.setAttribute(\"target\", value);\n    }\n    /**\n   * What should happen to the dialog when clicking the control (default: 'toggle')\n   * @type {'toggle'|'show'|'hide'}\n   */ get targetAction() {\n        return this.#targetAction;\n    }\n    set targetAction(value) {\n        if (!value) return;\n        this.#targetAction = value;\n        if (value === null) this.removeAttribute(\"target-action\");\n        else this.setAttribute(\"target-action\", value);\n    }\n    /**\n   * Enables clicking outside the modal to close it\n   * @type {boolean}\n   */ get lightDismiss() {\n        return this.#lightDismiss;\n    }\n    set lightDismiss(value) {\n        this.#lightDismiss = Boolean(value);\n        if (this.#lightDismiss) this.setAttribute(\"light-dismiss\", \"\");\n        else this.removeAttribute(\"light-dismiss\");\n    }\n    /**\n   * Turn on experimental view transitions when opening/closing\n   * @type {boolean}\n   */ get viewTransitions() {\n        return this.#viewTransitions;\n    }\n    set viewTransitions(value) {\n        this.#viewTransitions = Boolean(value);\n        if (this.#viewTransitions) this.setAttribute(\"view-transitions\", \"\");\n        else this.removeAttribute(\"view-transitions\");\n    }\n    /** @type {HTMLDialogElement|null} */ get targetElement() {\n        const root = /** @type {Document|ShadowRoot} */ this.getRootNode();\n        const el = this.target ? root.getElementById(this.target) : null;\n        if (!(el instanceof HTMLDialogElement)) return null;\n        return el;\n    }\n    connectedCallback() {\n        this.addEventListener(\"click\", this.#handleClick);\n    }\n    disconnectedCallback() {\n        this.removeEventListener(\"click\", this.#handleClick);\n    }\n    /** @returns {boolean} */ #dispatchBeforeToggle() {\n        return this.dispatchEvent(new Event(\"modal-control-before-toggle\", {\n            cancelable: true\n        }));\n    }\n    /** @returns {boolean} */ #dispatchToggle() {\n        return this.dispatchEvent(new Event(\"modal-control-toggle\"));\n    }\n    /**\n   * @param {MouseEvent} event\n   * @returns {void}\n   */ #handleClick = (event)=>{\n        const target = /** @type {Element} */ event.target;\n        if (!target.closest('button, input[type=\"button\"]')) return;\n        const { targetElement: targetElement } = this;\n        if (!targetElement) return;\n        switch(this.targetAction){\n            case \"show\":\n                if (!targetElement.open && this.#dispatchBeforeToggle()) this.#showModal(targetElement);\n                break;\n            case \"hide\":\n                if (targetElement.open && this.#dispatchBeforeToggle()) this.#close(targetElement);\n                break;\n            case \"toggle\":\n                if (this.#dispatchBeforeToggle()) {\n                    if (targetElement.open) this.#close(targetElement);\n                    else this.#showModal(targetElement);\n                }\n        }\n    };\n    /**\n   * @param {MouseEvent & { target: HTMLDialogElement }} event\n   */ #handleClickTarget = (event)=>{\n        const { targetElement: targetElement } = this;\n        if (targetElement && !(0, $01775cf5aedf1ce5$export$2e2bcd8739ae039)(event, targetElement) && this.#dispatchBeforeToggle()) this.#close(targetElement);\n    };\n    /**\n   * @param {MouseEvent & { target: HTMLDialogElement }} event\n   */ #handleClickRoot = (event)=>{\n        const { targetElement: targetElement } = this;\n        if (targetElement && !targetElement.contains(event.target) && this.#dispatchBeforeToggle()) this.#close(targetElement);\n    };\n    /**\n   * @param {Event & { target: HTMLDialogElement }} event\n   */ #handleCloseTarget = (event)=>{\n        // const dialog = event.target;\n        // dialog.open = true;\n        // startViewTransition(() => dialog.open = false);\n        // @ts-ignore\n        event.target.removeEventListener(\"click\", this.#handleClickTarget);\n        // @ts-ignore\n        event.target.getRootNode().removeEventListener(\"click\", this.#handleClickRoot);\n        // @ts-ignore\n        event.target.removeEventListener(\"close\", this.#handleCloseTarget);\n    };\n    /**\n   * @param {HTMLDialogElement} targetElement\n   * @returns {void}\n   */ #close(targetElement) {\n        this.#startViewTransition(()=>{\n            console.log(\"close\");\n            targetElement.close();\n            this.#dispatchToggle();\n        });\n    }\n    /**\n   * @param {HTMLDialogElement} targetElement\n   * @returns {void}\n   */ #showModal(targetElement) {\n        this.#startViewTransition(()=>{\n            targetElement.showModal();\n            if (this.lightDismiss) this.#listenOnClickOutside(targetElement);\n            this.#dispatchToggle();\n        });\n    }\n    /**\n   * @param {() => any} callback\n   * @returns {void}\n   */ #startViewTransition(callback) {\n        if (this.viewTransitions && \"startViewTransition\" in document) // @ts-ignore\n        return document.startViewTransition(callback);\n        return callback();\n    }\n    /**\n   * @param {HTMLDialogElement | null} dialog\n   */ #listenOnClickOutside(dialog) {\n        if (!dialog) return;\n        // @ts-ignore\n        dialog.addEventListener(\"click\", this.#handleClickTarget);\n        setTimeout(()=>{\n            // @ts-ignore\n            dialog.getRootNode().addEventListener(\"click\", this.#handleClickRoot);\n            // @ts-ignore\n            dialog.addEventListener(\"close\", this.#handleCloseTarget);\n        }, 0);\n    }\n}\n\n\n/**\n * @param {string} [name]\n * @returns {void}\n */ const $f9ccc1fa0d22629a$export$f36d6a7a5c09a23e = (name = \"modal-control\")=>{\n    if (\"customElements\" in window) customElements.define(name, (0, $1c1612fc3437cf32$export$2e2bcd8739ae039));\n};\n\n\n(0, $f9ccc1fa0d22629a$export$f36d6a7a5c09a23e)();\n\n})();\n//# sourceMappingURL=global.js.map\n","import { define } from \"./index.js\";\n\ndefine();\n","import ModalControlElement from './ModalControlElement.js';\n\n/**\n * @param {string} [name]\n * @returns {void}\n */\nconst define = (name = 'modal-control') => {\n  if ('customElements' in window) {\n    customElements.define(name, ModalControlElement);\n  }\n};\n\nexport { ModalControlElement, define };\n","import isEventInsideElement from \"./isEventInsideElement.js\";\nimport startViewTransition from \"./startViewTransition.js\";\n\n/**\n * @customElement modal-control\n * @attr target - ID of the target `<dialog>`\n * @attr {'toggle'|'show'|'hide'} target-action - What should happen to the dialog when clicking the control (default: 'toggle')\n * @attr light-dismiss - Enables clicking outside the modal to close it\n * @attr view-transitions - Turn on experimental view transitions when opening/closing\n * @fires modal-control-before-toggle\n * @fires modal-control-toggle\n */\nexport default class ModalControlElement extends HTMLElement {\n  /** @type {string | null} */\n  #target = null;\n  /** @type {'toggle' | 'show' | 'hide'} */\n  #targetAction = 'toggle';\n  /** @type {boolean} */\n  #lightDismiss = false;\n  /** @type {boolean} */\n  #viewTransitions = false;\n\n  static observedAttributes = [\n    'target',\n    'target-action',\n    'light-dismiss',\n    'view-transitions'\n  ];\n\n  /**\n   * @param {string}  name\n   * @param {string | undefined}     _oldVal\n   * @param {string | undefined}     newVal\n   */\n  attributeChangedCallback(name, _oldVal, newVal) {\n    if (name === 'target') {\n      this.#target = newVal || null;\n    }\n\n    if (\n      name === 'target-action' &&\n      newVal &&\n      ['toggle', 'show', 'hide'].includes(newVal)\n    ) {\n      this.#targetAction = /** @type {'toggle' | 'show' | 'hide'} */ (newVal);\n    }\n\n    if (name === 'light-dismiss') {\n      this.#lightDismiss = newVal !== undefined;\n    }\n\n    if (name === 'view-transitions') {\n      this.#viewTransitions = newVal !== undefined;\n    }\n  }\n\n  /**\n   * ID of the target `<dialog>`\n   * @type {string|null}\n   */\n  get target() {\n    return this.#target;\n  }\n\n  set target(value) {\n    this.#target = value;\n\n    if (value === null) {\n      this.removeAttribute('target');\n    } else {\n      this.setAttribute('target', value);\n    }\n  }\n\n  /**\n   * What should happen to the dialog when clicking the control (default: 'toggle')\n   * @type {'toggle'|'show'|'hide'}\n   */\n  get targetAction() {\n    return this.#targetAction;\n  }\n\n  set targetAction(value) {\n    if (!value) {\n      return;\n    }\n\n    this.#targetAction = value;\n\n    if (value === null) {\n      this.removeAttribute('target-action');\n    } else {\n      this.setAttribute('target-action', value);\n    }\n  }\n\n  /**\n   * Enables clicking outside the modal to close it\n   * @type {boolean}\n   */\n  get lightDismiss() {\n    return this.#lightDismiss;\n  }\n\n  set lightDismiss(value) {\n    this.#lightDismiss = Boolean(value);\n\n    if (this.#lightDismiss) {\n      this.setAttribute('light-dismiss', '');\n    } else {\n      this.removeAttribute('light-dismiss');\n    }\n  }\n\n  /**\n   * Turn on experimental view transitions when opening/closing\n   * @type {boolean}\n   */\n  get viewTransitions() {\n    return this.#viewTransitions;\n  }\n\n  set viewTransitions(value) {\n    this.#viewTransitions = Boolean(value);\n\n    if (this.#viewTransitions) {\n      this.setAttribute('view-transitions', '');\n    } else {\n      this.removeAttribute('view-transitions');\n    }\n  }\n\n  /** @type {HTMLDialogElement|null} */\n  get targetElement() {\n    const root = /** @type {Document|ShadowRoot} */ (this.getRootNode());\n    const el = this.target ? root.getElementById(this.target) : null;\n\n    if (!(el instanceof HTMLDialogElement)) {\n      return null;\n    }\n\n    return el;\n  }\n\n  connectedCallback() {\n    this.addEventListener('click', this.#handleClick);\n  }\n\n  disconnectedCallback() {\n    this.removeEventListener('click', this.#handleClick);\n  }\n\n  /** @returns {boolean} */\n  #dispatchBeforeToggle() {\n    return this.dispatchEvent(\n      new Event('modal-control-before-toggle', { cancelable: true })\n    );\n  }\n\n  /** @returns {boolean} */\n  #dispatchToggle() {\n    return this.dispatchEvent(new Event('modal-control-toggle'));\n  }\n\n  /**\n   * @param {MouseEvent} event\n   * @returns {void}\n   */\n  #handleClick = event => {\n    const target = /** @type {Element} */ (event.target);\n\n    if (!target.closest('button, input[type=\"button\"]')) {\n      return;\n    }\n\n    const { targetElement } = this;\n\n    if (!targetElement) {\n      return;\n    }\n\n    switch (this.targetAction) {\n      case 'show':\n        if (!targetElement.open && this.#dispatchBeforeToggle()) {\n          this.#showModal(targetElement);\n        }\n        break;\n      case 'hide':\n        if (targetElement.open && this.#dispatchBeforeToggle()) {\n          this.#close(targetElement);\n        }\n        break;\n      case 'toggle':\n        if (this.#dispatchBeforeToggle()) {\n          if (targetElement.open) {\n            this.#close(targetElement);\n          } else {\n            this.#showModal(targetElement);\n          }\n        }\n    }\n  };\n\n  /**\n   * @param {MouseEvent & { target: HTMLDialogElement }} event\n   */\n  #handleClickTarget = (event) => {\n    const { targetElement } = this;\n\n    if (targetElement && !isEventInsideElement(event, targetElement) && this.#dispatchBeforeToggle()) {\n      this.#close(targetElement);\n    }\n  }\n\n  /**\n   * @param {MouseEvent & { target: HTMLDialogElement }} event\n   */\n  #handleClickRoot = (event) => {\n    const { targetElement } = this;\n\n    if (targetElement && !targetElement.contains(event.target) && this.#dispatchBeforeToggle()) {\n      this.#close(targetElement);\n    }\n  }\n\n  /**\n   * @param {Event & { target: HTMLDialogElement }} event\n   */\n  #handleCloseTarget = (event) => {\n    // const dialog = event.target;\n    // dialog.open = true;\n    // startViewTransition(() => dialog.open = false);\n\n    // @ts-ignore\n    event.target.removeEventListener('click', this.#handleClickTarget);\n    // @ts-ignore\n    event.target.getRootNode().removeEventListener('click', this.#handleClickRoot);\n    // @ts-ignore\n    event.target.removeEventListener('close', this.#handleCloseTarget);\n  };\n\n  /**\n   * @param {HTMLDialogElement} targetElement\n   * @returns {void}\n   */\n  #close(targetElement) {\n    this.#startViewTransition(() => {\n      console.log('close');\n      targetElement.close();\n      this.#dispatchToggle();\n    });\n  }\n\n  /**\n   * @param {HTMLDialogElement} targetElement\n   * @returns {void}\n   */\n  #showModal(targetElement) {\n    this.#startViewTransition(() => {\n      targetElement.showModal();\n\n      if (this.lightDismiss) {\n        this.#listenOnClickOutside(targetElement);\n      }\n\n      this.#dispatchToggle();\n    });\n  }\n\n  /**\n   * @param {() => any} callback\n   * @returns {void}\n   */\n  #startViewTransition(callback) {\n    if (this.viewTransitions && 'startViewTransition' in document) {\n      // @ts-ignore\n      return document.startViewTransition(callback);\n    }\n\n    return callback();\n  }\n\n  /**\n   * @param {HTMLDialogElement | null} dialog\n   */\n  #listenOnClickOutside(dialog) {\n    if (!dialog) {\n      return;\n    }\n\n    // @ts-ignore\n    dialog.addEventListener('click', this.#handleClickTarget);\n\n    setTimeout(() => {\n      // @ts-ignore\n      dialog.getRootNode().addEventListener('click', this.#handleClickRoot);\n      // @ts-ignore\n      dialog.addEventListener('close', this.#handleCloseTarget);\n    }, 0);\n  }\n}\n","/**\n * @param {MouseEvent}  event\n * @param {HTMLElement} element\n * @returns {boolean}\n */\nexport default function isEventInsideElement(event, element) {\n  const { clientX, clientY} = event;\n  const target = /** @type {HTMLElement} */ (event.target);\n  const { x, y, width, height } = element.getBoundingClientRect();\n\n  return (\n    element.contains(target) ||\n    (\n      clientX >= x &&\n      clientX <= x + width &&\n      clientY >= y &&\n      clientY <= y + height\n    )\n  );\n}","/**\n * @param {() => any} callback\n * @returns {void}\n */\nexport default function startViewTransition(callback) {\n  if ('startViewTransition' in document) {\n    return document.startViewTransition(callback);\n  }\n\n  return callback();\n}"],"names":["$1c1612fc3437cf32$export$2e2bcd8739ae039","HTMLElement","target","targetAction","lightDismiss","viewTransitions","observedAttributes","attributeChangedCallback","name","_oldVal","newVal","includes","undefined","value","removeAttribute","setAttribute","Boolean","targetElement","root","getRootNode","el","getElementById","HTMLDialogElement","connectedCallback","addEventListener","handleClick","disconnectedCallback","removeEventListener","dispatchBeforeToggle","dispatchEvent","Event","cancelable","dispatchToggle","event","closest","open","showModal","close","handleClickTarget","element","clientX","clientY","x","y","width","height","getBoundingClientRect","contains","handleClickRoot","handleCloseTarget","startViewTransition","console","log","listenOnClickOutside","callback","document","dialog","setTimeout","window","customElements","define"],"version":3,"file":"global.js.map"}
