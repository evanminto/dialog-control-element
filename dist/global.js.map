{"mappings":"A,C,KGOe,MAAA,UAAkC,YAE/C,CAAC,CAAM,CAAG,IAAK,AAEf,EAAC,CAAY,CAAG,QAAS,AAEzB,QAAO,mBAAqB,CAAC,SAAU,gBAAgB,AAAC,AAOxD,CAAA,yBAAyB,CAAI,CAAE,CAAO,CAAE,CAAM,CAAE,CACjC,WAAT,GACF,CAAA,IAAI,CAAC,CAAC,CAAM,CAAG,CADjB,EAIa,kBAAT,GACF,CAAA,IAAI,CAAC,CAAC,CAAY,CAAG,CADvB,CAGF,CAMA,IAAI,QAAS,CACX,OAAO,IAAI,CAAC,CAAC,CAAM,AACrB,CAEA,IAAI,OAAO,CAAK,CAAE,CAChB,IAAI,CAAC,CAAC,CAAM,CAAG,EAEX,AAAU,OAAV,EACF,IAAI,CAAC,eAAA,CAAgB,UAErB,IAAI,CAAC,YAAA,CAAa,SAAU,EAEhC,CAMA,IAAI,cAAe,CACjB,OAAO,IAAI,CAAC,CAAC,CAAY,AAC3B,CAEA,IAAI,aAAa,CAAK,CAAE,CACjB,IAIL,IAAI,CAAC,CAAC,CAAY,CAAG,EAEjB,AAAU,OAAV,EACF,IAAI,CAAC,eAAA,CAAgB,iBAErB,IAAI,CAAC,YAAA,CAAa,gBAAiB,GAEvC,CAGA,IAAI,eAAgB,CAClB,IAAM,EAA2C,IAAI,CAAC,WAAtD,GACM,EAAK,IAAI,CAAC,MAAA,CAAS,EAAK,cAAA,CAAe,IAAI,CAAC,MAAA,EAAU,YAE5D,AAAM,aAAc,kBAIb,EAHE,IAIX,CAEA,mBAAoB,CAClB,IAAI,CAAC,gBAAA,CAAiB,QAAS,IAAI,CAAC,CAAC,CAAW,CAClD,CAEA,sBAAuB,CACrB,IAAI,CAAC,mBAAA,CAAoB,QAAS,IAAI,CAAC,CAAC,CAAW,CACrD,CAGA,CAAC,CAAoB,GACnB,OAAO,IAAI,CAAC,aAAA,CACV,IAAI,MAAM,8BAA+B,CAAE,WAAY,CAAA,CAAK,GAEhE,CAGA,CAAC,CAAc,GACb,OAAO,IAAI,CAAC,aAAA,CAAc,IAAI,MAAM,wBACtC,CAMA,CAAC,CAAW,CAAG,AAAA,IACb,IAAM,EAAiC,EAAM,MAA7C,CAEA,GAAI,CAAC,EAAO,OAAA,CAAQ,gCAClB,OAGF,GAAM,CAAA,cAAE,CAAa,CAAE,CAAG,IAAI,CAE9B,GAAK,EAIL,OAAQ,IAAI,CAAC,YAAb,EACE,IAAK,OACC,CAAC,EAAc,IAAA,EAAQ,IAAI,CAAC,CAAC,CAAoB,KACnD,EAAc,SAAd,GACA,IAAI,CAAC,CAAC,CAAc,IAEtB,KACF,KAAK,OACC,EAAc,IAAA,EAAQ,IAAI,CAAC,CAAC,CAAoB,KAClD,EAAc,KAAd,GACA,IAAI,CAAC,CAAC,CAAc,IAEtB,KACF,KAAK,SACC,IAAI,CAAC,CAAC,CAAoB,KACxB,EAAc,IAAA,CAChB,EAAc,KADhB,GAGE,EAAc,SAAd,GAGF,IAAI,CAAC,CAAC,CAAc,GAE1B,CACF,CAAE,AACJ,CF9IA,ACIe,CAAA,CAAC,EAAO,eAAe,IAChC,mBAAoB,QACtB,eAAe,MAAA,CAAO,EAAM,EAEhC,CAAA,G,C","sources":["<anon>","src/global.js","src/index.js","src/ModalControlElement.js"],"sourcesContent":["(() => {\n/**\n * @customElement modal-control\n * @attr target - ID of the target `<dialog>`\n * @attr {'toggle'|'show'|'hide'} target-action - What should happen to the dialog when clicking the control (default: 'toggle')\n * @fires modal-control-before-toggle\n * @fires modal-control-toggle\n */ class $1c1612fc3437cf32$export$2e2bcd8739ae039 extends HTMLElement {\n    /** @type {string|null} */ #target = null;\n    /** @type {'toggle'|'show'|'hide'} */ #targetAction = \"toggle\";\n    static observedAttributes = [\n        \"target\",\n        \"target-action\"\n    ];\n    /**\n   * @param {string}  name\n   * @param {string}     _oldVal\n   * @param {string}     newVal\n   */ attributeChangedCallback(name, _oldVal, newVal) {\n        if (name === \"target\") this.#target = newVal;\n        if (name === \"target-action\") this.#targetAction = newVal;\n    }\n    /**\n   * ID of the target `<dialog>`\n   * @type {string|null}\n   */ get target() {\n        return this.#target;\n    }\n    set target(value) {\n        this.#target = value;\n        if (value === null) this.removeAttribute(\"target\");\n        else this.setAttribute(\"target\", value);\n    }\n    /**\n   * What should happen to the dialog when clicking the control (default: 'toggle')\n   * @type {'toggle'|'show'|'hide'}\n   */ get targetAction() {\n        return this.#targetAction;\n    }\n    set targetAction(value) {\n        if (!value) return;\n        this.#targetAction = value;\n        if (value === null) this.removeAttribute(\"target-action\");\n        else this.setAttribute(\"target-action\", value);\n    }\n    /** @type {HTMLDialogElement|null} */ get targetElement() {\n        const root = /** @type {Document|ShadowRoot} */ this.getRootNode();\n        const el = this.target ? root.getElementById(this.target) : null;\n        if (!(el instanceof HTMLDialogElement)) return null;\n        return el;\n    }\n    connectedCallback() {\n        this.addEventListener(\"click\", this.#handleClick);\n    }\n    disconnectedCallback() {\n        this.removeEventListener(\"click\", this.#handleClick);\n    }\n    /** @returns {boolean} */ #dispatchBeforeToggle() {\n        return this.dispatchEvent(new Event(\"modal-control-before-toggle\", {\n            cancelable: true\n        }));\n    }\n    /** @returns {boolean} */ #dispatchToggle() {\n        return this.dispatchEvent(new Event(\"modal-control-toggle\"));\n    }\n    /**\n   * @param {MouseEvent} event\n   * @returns {void}\n   */ #handleClick = (event)=>{\n        const target = /** @type {Element} */ event.target;\n        if (!target.closest('button, input[type=\"button\"]')) return;\n        const { targetElement: targetElement } = this;\n        if (!targetElement) return;\n        switch(this.targetAction){\n            case \"show\":\n                if (!targetElement.open && this.#dispatchBeforeToggle()) {\n                    targetElement.showModal();\n                    this.#dispatchToggle();\n                }\n                break;\n            case \"hide\":\n                if (targetElement.open && this.#dispatchBeforeToggle()) {\n                    targetElement.close();\n                    this.#dispatchToggle();\n                }\n                break;\n            case \"toggle\":\n                if (this.#dispatchBeforeToggle()) {\n                    if (targetElement.open) targetElement.close();\n                    else targetElement.showModal();\n                    this.#dispatchToggle();\n                }\n        }\n    };\n}\n\n\n/**\n * @param {string} [name]\n * @returns {void}\n */ const $f9ccc1fa0d22629a$export$f36d6a7a5c09a23e = (name = \"modal-control\")=>{\n    if (\"customElements\" in window) customElements.define(name, (0, $1c1612fc3437cf32$export$2e2bcd8739ae039));\n};\n\n\n(0, $f9ccc1fa0d22629a$export$f36d6a7a5c09a23e)();\n\n})();\n//# sourceMappingURL=global.js.map\n","import { define } from \"./index.js\";\n\ndefine();\n","import ModalControlElement from './ModalControlElement.js';\n\n/**\n * @param {string} [name]\n * @returns {void}\n */\nconst define = (name = 'modal-control') => {\n  if ('customElements' in window) {\n    customElements.define(name, ModalControlElement);\n  }\n};\n\nexport { ModalControlElement, define };\n","/**\n * @customElement modal-control\n * @attr target - ID of the target `<dialog>`\n * @attr {'toggle'|'show'|'hide'} target-action - What should happen to the dialog when clicking the control (default: 'toggle')\n * @fires modal-control-before-toggle\n * @fires modal-control-toggle\n */\nexport default class ModalControlElement extends HTMLElement {\n  /** @type {string|null} */\n  #target = null;\n  /** @type {'toggle'|'show'|'hide'} */\n  #targetAction = 'toggle';\n\n  static observedAttributes = ['target', 'target-action'];\n\n  /**\n   * @param {string}  name\n   * @param {string}     _oldVal\n   * @param {string}     newVal\n   */\n  attributeChangedCallback(name, _oldVal, newVal) {\n    if (name === 'target') {\n      this.#target = newVal;\n    }\n\n    if (name === 'target-action') {\n      this.#targetAction = newVal;\n    }\n  }\n\n  /**\n   * ID of the target `<dialog>`\n   * @type {string|null}\n   */\n  get target() {\n    return this.#target;\n  }\n\n  set target(value) {\n    this.#target = value;\n\n    if (value === null) {\n      this.removeAttribute('target');\n    } else {\n      this.setAttribute('target', value);\n    }\n  }\n\n  /**\n   * What should happen to the dialog when clicking the control (default: 'toggle')\n   * @type {'toggle'|'show'|'hide'}\n   */\n  get targetAction() {\n    return this.#targetAction;\n  }\n\n  set targetAction(value) {\n    if (!value) {\n      return;\n    }\n\n    this.#targetAction = value;\n\n    if (value === null) {\n      this.removeAttribute('target-action');\n    } else {\n      this.setAttribute('target-action', value);\n    }\n  }\n\n  /** @type {HTMLDialogElement|null} */\n  get targetElement() {\n    const root = /** @type {Document|ShadowRoot} */ (this.getRootNode());\n    const el = this.target ? root.getElementById(this.target) : null;\n\n    if (!(el instanceof HTMLDialogElement)) {\n      return null;\n    }\n\n    return el;\n  }\n\n  connectedCallback() {\n    this.addEventListener('click', this.#handleClick);\n  }\n\n  disconnectedCallback() {\n    this.removeEventListener('click', this.#handleClick);\n  }\n\n  /** @returns {boolean} */\n  #dispatchBeforeToggle() {\n    return this.dispatchEvent(\n      new Event('modal-control-before-toggle', { cancelable: true })\n    );\n  }\n\n  /** @returns {boolean} */\n  #dispatchToggle() {\n    return this.dispatchEvent(new Event('modal-control-toggle'));\n  }\n\n  /**\n   * @param {MouseEvent} event\n   * @returns {void}\n   */\n  #handleClick = event => {\n    const target = /** @type {Element} */ (event.target);\n\n    if (!target.closest('button, input[type=\"button\"]')) {\n      return;\n    }\n\n    const { targetElement } = this;\n\n    if (!targetElement) {\n      return;\n    }\n\n    switch (this.targetAction) {\n      case 'show':\n        if (!targetElement.open && this.#dispatchBeforeToggle()) {\n          targetElement.showModal();\n          this.#dispatchToggle();\n        }\n        break;\n      case 'hide':\n        if (targetElement.open && this.#dispatchBeforeToggle()) {\n          targetElement.close();\n          this.#dispatchToggle();\n        }\n        break;\n      case 'toggle':\n        if (this.#dispatchBeforeToggle()) {\n          if (targetElement.open) {\n            targetElement.close();\n          } else {\n            targetElement.showModal();\n          }\n\n          this.#dispatchToggle();\n        }\n    }\n  };\n}\n"],"names":["$1c1612fc3437cf32$export$2e2bcd8739ae039","HTMLElement","target","targetAction","observedAttributes","attributeChangedCallback","name","_oldVal","newVal","value","removeAttribute","setAttribute","targetElement","root","getRootNode","el","getElementById","HTMLDialogElement","connectedCallback","addEventListener","handleClick","disconnectedCallback","removeEventListener","dispatchBeforeToggle","dispatchEvent","Event","cancelable","dispatchToggle","event","closest","open","showModal","close","window","customElements","define"],"version":3,"file":"global.js.map"}