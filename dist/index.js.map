{"mappings":"ACAA;;;;;;CAMC,GACc,uDAAkC;IAC/C,wBAAwB,GACxB,CAAC,MAAM,GAAG,KAAK;IACf,wBAAwB,GACxB,CAAC,YAAY,GAAG,KAAK;IAErB,OAAO,qBAAqB;QAAC;QAAU;KAAgB,CAAC;IAExD;;;;GAIC,GACD,yBAAyB,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE;QAC9C,IAAI,SAAS,UACX,IAAI,CAAC,CAAC,MAAM,GAAG;QAGjB,IAAI,SAAS,iBACX,IAAI,CAAC,CAAC,YAAY,GAAG;IAEzB;IAEA,wBAAwB,GACxB,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,CAAC,MAAM;IACrB;IAEA,IAAI,OAAO,KAAK,EAAE;QAChB,IAAI,CAAC,CAAC,MAAM,GAAG;QAEf,IAAI,UAAU,MACZ,IAAI,CAAC,gBAAgB;aAErB,IAAI,CAAC,aAAa,UAAU;IAEhC;IAEA,wBAAwB,GACxB,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,CAAC,YAAY;IAC3B;IAEA,IAAI,aAAa,KAAK,EAAE;QACtB,IAAI,CAAC,CAAC,YAAY,GAAG;QAErB,IAAI,UAAU,MACZ,IAAI,CAAC,gBAAgB;aAErB,IAAI,CAAC,aAAa,iBAAiB;IAEvC;IAEA,mCAAmC,GACnC,IAAI,gBAAgB;QAClB,MAAM,OAAO,gCAAgC,GAAI,IAAI,CAAC;QACtD,MAAM,KAAK,IAAI,CAAC,SAAS,KAAK,eAAe,IAAI,CAAC,UAAU;QAE5D,IAAI,CAAE,CAAA,cAAc,iBAAgB,GAClC,OAAO;QAGT,OAAO;IACT;IAEA,oBAAoB;QAClB,IAAI,CAAC,iBAAiB,SAAS,IAAI,CAAC,CAAC,WAAW;IAClD;IAEA,uBAAuB;QACrB,IAAI,CAAC,oBAAoB,SAAS,IAAI,CAAC,CAAC,WAAW;IACrD;IAEA,uBAAuB,GACvB,CAAC,oBAAoB;QACnB,OAAO,IAAI,CAAC,cACV,IAAI,MAAM,+BAA+B;YAAE,YAAY;QAAK;IAEhE;IAEA,uBAAuB,GACvB,CAAC,cAAc;QACb,OAAO,IAAI,CAAC,cAAc,IAAI,MAAM;IACtC;IAEA;;;GAGC,GACD,CAAC,WAAW,GAAG,CAAA;QACb,MAAM,SAAS,oBAAoB,GAAI,MAAM;QAE7C,IAAI,CAAC,OAAO,QAAQ,iCAClB;QAGF,MAAM,iBAAE,aAAa,EAAE,GAAG,IAAI;QAE9B,IAAI,CAAC,eACH;QAGF,OAAQ,IAAI,CAAC;YACX,KAAK;gBACH,IAAI,CAAC,cAAc,QAAQ,IAAI,CAAC,CAAC,oBAAoB,IAAI;oBACvD,cAAc;oBACd,IAAI,CAAC,CAAC,cAAc;gBACtB;gBACA;YACF,KAAK;gBACH,IAAI,cAAc,QAAQ,IAAI,CAAC,CAAC,oBAAoB,IAAI;oBACtD,cAAc;oBACd,IAAI,CAAC,CAAC,cAAc;gBACtB;gBACA;YACF,KAAK;gBACH,IAAI,IAAI,CAAC,CAAC,oBAAoB,IAAI;oBAChC,IAAI,cAAc,MAChB,cAAc;yBAEd,cAAc;oBAGhB,IAAI,CAAC,CAAC,cAAc;gBACtB;QACJ;IACF,EAAE;AACJ;;;ADpIA;;;CAGC,GACD,MAAM,4CAAS,CAAC,OAAO,eAAe;IACpC,IAAI,oBAAoB,QACtB,eAAe,OAAO,MAAM,CAAA,GAAA,wCAAkB;AAElD","sources":["src/index.js","src/ModalControlElement.js"],"sourcesContent":["import ModalControlElement from './ModalControlElement.js';\n\n/**\n * @param {string} name\n * @returns {void}\n */\nconst define = (name = 'modal-control') => {\n  if ('customElements' in window) {\n    customElements.define(name, ModalControlElement);\n  }\n};\n\nexport { ModalControlElement, define };\n","/**\n * @customElement modal-control\n * @attr target - ID of the target `<dialog>`\n * @attr {'toggle'|'show'|'hide'} target-action - What should happen to the dialog when clicking the control\n * @fires modal-control-before-toggle\n * @fires modal-control-toggle\n */\nexport default class ModalControlElement extends HTMLElement {\n  /** @type {string|null} */\n  #target = null;\n  /** @type {string|null} */\n  #targetAction = null;\n\n  static observedAttributes = ['target', 'target-action'];\n\n  /**\n   * @param {string}  name\n   * @param {string}     _oldVal\n   * @param {string}     newVal\n   */\n  attributeChangedCallback(name, _oldVal, newVal) {\n    if (name === 'target') {\n      this.#target = newVal;\n    }\n\n    if (name === 'target-action') {\n      this.#targetAction = newVal;\n    }\n  }\n\n  /** @type {string|null} */\n  get target() {\n    return this.#target;\n  }\n\n  set target(value) {\n    this.#target = value;\n\n    if (value === null) {\n      this.removeAttribute('target');\n    } else {\n      this.setAttribute('target', value);\n    }\n  }\n\n  /** @type {string|null} */\n  get targetAction() {\n    return this.#targetAction;\n  }\n\n  set targetAction(value) {\n    this.#targetAction = value;\n\n    if (value === null) {\n      this.removeAttribute('target-action');\n    } else {\n      this.setAttribute('target-action', value);\n    }\n  }\n\n  /** @type {HTMLDialogElement|null} */\n  get targetElement() {\n    const root = /** @type {Document|ShadowRoot} */ (this.getRootNode());\n    const el = this.target ? root.getElementById(this.target) : null;\n\n    if (!(el instanceof HTMLDialogElement)) {\n      return null;\n    }\n\n    return el;\n  }\n\n  connectedCallback() {\n    this.addEventListener('click', this.#handleClick);\n  }\n\n  disconnectedCallback() {\n    this.removeEventListener('click', this.#handleClick);\n  }\n\n  /** @returns {boolean} */\n  #dispatchBeforeToggle() {\n    return this.dispatchEvent(\n      new Event('modal-control-before-toggle', { cancelable: true })\n    );\n  }\n\n  /** @returns {boolean} */\n  #dispatchToggle() {\n    return this.dispatchEvent(new Event('modal-control-toggle'));\n  }\n\n  /**\n   * @param {MouseEvent} event\n   * @returns {void}\n   */\n  #handleClick = event => {\n    const target = /** @type {Element} */ (event.target);\n\n    if (!target.closest('button, input[type=\"button\"]')) {\n      return;\n    }\n\n    const { targetElement } = this;\n\n    if (!targetElement) {\n      return;\n    }\n\n    switch (this.targetAction) {\n      case 'show':\n        if (!targetElement.open && this.#dispatchBeforeToggle()) {\n          targetElement.showModal();\n          this.#dispatchToggle();\n        }\n        break;\n      case 'hide':\n        if (targetElement.open && this.#dispatchBeforeToggle()) {\n          targetElement.close();\n          this.#dispatchToggle();\n        }\n        break;\n      case 'toggle':\n        if (this.#dispatchBeforeToggle()) {\n          if (targetElement.open) {\n            targetElement.close();\n          } else {\n            targetElement.showModal();\n          }\n\n          this.#dispatchToggle();\n        }\n    }\n  };\n}\n"],"names":[],"version":3,"file":"index.js.map"}