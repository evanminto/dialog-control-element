{"mappings":"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","sources":["src/index.js","src/ModalControlElement.js","src/isEventInsideElement.js","src/startViewTransition.js"],"sourcesContent":["import ModalControlElement from './ModalControlElement.js';\n\n/**\n * @param {string} [name]\n * @returns {void}\n */\nconst define = (name = 'modal-control') => {\n  if ('customElements' in window) {\n    customElements.define(name, ModalControlElement);\n  }\n};\n\nexport { ModalControlElement, define };\n","import isEventInsideElement from \"./isEventInsideElement.js\";\nimport startViewTransition from \"./startViewTransition.js\";\n\n/**\n * @customElement modal-control\n * @attr target - ID of the target `<dialog>`\n * @attr {'toggle'|'show'|'hide'} target-action - What should happen to the dialog when clicking the control (default: 'toggle')\n * @attr light-dismiss - Enables clicking outside the modal to close it\n * @attr view-transitions - Turn on experimental view transitions when opening/closing\n * @fires modal-control-before-toggle\n * @fires modal-control-toggle\n */\nexport default class ModalControlElement extends HTMLElement {\n  /** @type {string | null} */\n  #target = null;\n  /** @type {'toggle' | 'show' | 'hide'} */\n  #targetAction = 'toggle';\n  /** @type {boolean} */\n  #lightDismiss = false;\n  /** @type {boolean} */\n  #viewTransitions = false;\n\n  static observedAttributes = [\n    'target',\n    'target-action',\n    'light-dismiss',\n    'view-transitions'\n  ];\n\n  /**\n   * @param {string}  name\n   * @param {string | undefined}     _oldVal\n   * @param {string | undefined}     newVal\n   */\n  attributeChangedCallback(name, _oldVal, newVal) {\n    if (name === 'target') {\n      this.#target = newVal || null;\n    }\n\n    if (\n      name === 'target-action' &&\n      newVal &&\n      ['toggle', 'show', 'hide'].includes(newVal)\n    ) {\n      this.#targetAction = /** @type {'toggle' | 'show' | 'hide'} */ (newVal);\n    }\n\n    if (name === 'light-dismiss') {\n      this.#lightDismiss = newVal !== undefined;\n    }\n\n    if (name === 'view-transitions') {\n      this.#viewTransitions = newVal !== undefined;\n    }\n  }\n\n  /**\n   * ID of the target `<dialog>`\n   * @type {string|null}\n   */\n  get target() {\n    return this.#target;\n  }\n\n  set target(value) {\n    this.#target = value;\n\n    if (value === null) {\n      this.removeAttribute('target');\n    } else {\n      this.setAttribute('target', value);\n    }\n  }\n\n  /**\n   * What should happen to the dialog when clicking the control (default: 'toggle')\n   * @type {'toggle'|'show'|'hide'}\n   */\n  get targetAction() {\n    return this.#targetAction;\n  }\n\n  set targetAction(value) {\n    if (!value) {\n      return;\n    }\n\n    this.#targetAction = value;\n\n    if (value === null) {\n      this.removeAttribute('target-action');\n    } else {\n      this.setAttribute('target-action', value);\n    }\n  }\n\n  /**\n   * Enables clicking outside the modal to close it\n   * @type {boolean}\n   */\n  get lightDismiss() {\n    return this.#lightDismiss;\n  }\n\n  set lightDismiss(value) {\n    this.#lightDismiss = Boolean(value);\n\n    if (this.#lightDismiss) {\n      this.setAttribute('light-dismiss', '');\n    } else {\n      this.removeAttribute('light-dismiss');\n    }\n  }\n\n  /**\n   * Turn on experimental view transitions when opening/closing\n   * @type {boolean}\n   */\n  get viewTransitions() {\n    return this.#viewTransitions;\n  }\n\n  set viewTransitions(value) {\n    this.#viewTransitions = Boolean(value);\n\n    if (this.#viewTransitions) {\n      this.setAttribute('view-transitions', '');\n    } else {\n      this.removeAttribute('view-transitions');\n    }\n  }\n\n  /** @type {HTMLDialogElement|null} */\n  get targetElement() {\n    const root = /** @type {Document|ShadowRoot} */ (this.getRootNode());\n    const el = this.target ? root.getElementById(this.target) : null;\n\n    if (!(el instanceof HTMLDialogElement)) {\n      return null;\n    }\n\n    return el;\n  }\n\n  connectedCallback() {\n    this.addEventListener('click', this.#handleClick);\n  }\n\n  disconnectedCallback() {\n    this.removeEventListener('click', this.#handleClick);\n  }\n\n  /** @returns {boolean} */\n  #dispatchBeforeToggle() {\n    return this.dispatchEvent(\n      new Event('modal-control-before-toggle', { cancelable: true })\n    );\n  }\n\n  /** @returns {boolean} */\n  #dispatchToggle() {\n    return this.dispatchEvent(new Event('modal-control-toggle'));\n  }\n\n  /**\n   * @param {MouseEvent} event\n   * @returns {void}\n   */\n  #handleClick = event => {\n    const target = /** @type {Element} */ (event.target);\n\n    if (!target.closest('button, input[type=\"button\"]')) {\n      return;\n    }\n\n    const { targetElement } = this;\n\n    if (!targetElement) {\n      return;\n    }\n\n    switch (this.targetAction) {\n      case 'show':\n        if (!targetElement.open && this.#dispatchBeforeToggle()) {\n          this.#showModal(targetElement);\n        }\n        break;\n      case 'hide':\n        if (targetElement.open && this.#dispatchBeforeToggle()) {\n          this.#close(targetElement);\n        }\n        break;\n      case 'toggle':\n        if (this.#dispatchBeforeToggle()) {\n          if (targetElement.open) {\n            this.#close(targetElement);\n          } else {\n            this.#showModal(targetElement);\n          }\n        }\n    }\n  };\n\n  /**\n   * @param {MouseEvent & { target: HTMLDialogElement }} event\n   */\n  #handleClickTarget = (event) => {\n    const { targetElement } = this;\n\n    if (targetElement && !isEventInsideElement(event, targetElement) && this.#dispatchBeforeToggle()) {\n      this.#close(targetElement);\n    }\n  }\n\n  /**\n   * @param {MouseEvent & { target: HTMLDialogElement }} event\n   */\n  #handleClickRoot = (event) => {\n    const { targetElement } = this;\n\n    if (targetElement && !targetElement.contains(event.target) && this.#dispatchBeforeToggle()) {\n      this.#close(targetElement);\n    }\n  }\n\n  /**\n   * @param {Event & { target: HTMLDialogElement }} event\n   */\n  #handleCloseTarget = (event) => {\n    // const dialog = event.target;\n    // dialog.open = true;\n    // startViewTransition(() => dialog.open = false);\n\n    // @ts-ignore\n    event.target.removeEventListener('click', this.#handleClickTarget);\n    // @ts-ignore\n    event.target.getRootNode().removeEventListener('click', this.#handleClickRoot);\n    // @ts-ignore\n    event.target.removeEventListener('close', this.#handleCloseTarget);\n  };\n\n  /**\n   * @param {HTMLDialogElement} targetElement\n   * @returns {void}\n   */\n  #close(targetElement) {\n    this.#startViewTransition(() => {\n      console.log('close');\n      targetElement.close();\n      this.#dispatchToggle();\n    });\n  }\n\n  /**\n   * @param {HTMLDialogElement} targetElement\n   * @returns {void}\n   */\n  #showModal(targetElement) {\n    this.#startViewTransition(() => {\n      targetElement.showModal();\n\n      if (this.lightDismiss) {\n        this.#listenOnClickOutside(targetElement);\n      }\n\n      this.#dispatchToggle();\n    });\n  }\n\n  /**\n   * @param {() => any} callback\n   * @returns {void}\n   */\n  #startViewTransition(callback) {\n    if (this.viewTransitions && 'startViewTransition' in document) {\n      // @ts-ignore\n      return document.startViewTransition(callback);\n    }\n\n    return callback();\n  }\n\n  /**\n   * @param {HTMLDialogElement | null} dialog\n   */\n  #listenOnClickOutside(dialog) {\n    if (!dialog) {\n      return;\n    }\n\n    // @ts-ignore\n    dialog.addEventListener('click', this.#handleClickTarget);\n\n    setTimeout(() => {\n      // @ts-ignore\n      dialog.getRootNode().addEventListener('click', this.#handleClickRoot);\n      // @ts-ignore\n      dialog.addEventListener('close', this.#handleCloseTarget);\n    }, 0);\n  }\n}\n","/**\n * @param {MouseEvent}  event\n * @param {HTMLElement} element\n * @returns {boolean}\n */\nexport default function isEventInsideElement(event, element) {\n  const { clientX, clientY} = event;\n  const target = /** @type {HTMLElement} */ (event.target);\n  const { x, y, width, height } = element.getBoundingClientRect();\n\n  return (\n    element.contains(target) ||\n    (\n      clientX >= x &&\n      clientX <= x + width &&\n      clientY >= y &&\n      clientY <= y + height\n    )\n  );\n}","/**\n * @param {() => any} callback\n * @returns {void}\n */\nexport default function startViewTransition(callback) {\n  if ('startViewTransition' in document) {\n    return document.startViewTransition(callback);\n  }\n\n  return callback();\n}"],"names":[],"version":3,"file":"index.js.map"}
